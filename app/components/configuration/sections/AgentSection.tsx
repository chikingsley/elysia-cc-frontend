"use client";

import React from "react";
import { RiRobot2Line } from "react-icons/ri";
import { SiDocsify } from "react-icons/si";
import {
  SettingCard,
  SettingHeader,
  SettingGroup,
  SettingItem,
  SettingTitle,
} from "../SettingComponents";
import SettingTextarea from "../SettingTextarea";
import SettingCheckbox from "../SettingCheckbox";
import { BackendConfig } from "@/app/types/objects";

interface AgentSectionProps {
  currentUserConfig: BackendConfig | null;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  onUpdateFields: (key: string, value: any) => void;
  onUpdateSettings: (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    keyOrUpdates: string | Record<string, any>,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    value?: any
  ) => void;
  title?: string; // Optional title override
  showDocumentation?: boolean; // Option to hide documentation button
  showFeedbackSetting?: boolean; // Option to show/hide feedback setting
}

/**
 * Component for configuring AI agent settings
 * Handles agent description, end goal, style, and feedback options
 */
export default function AgentSection({
  currentUserConfig,
  onUpdateFields,
  onUpdateSettings,
  title = "Agent",
  showDocumentation = true,
  showFeedbackSetting = true,
}: AgentSectionProps) {
  return (
    <SettingCard>
      <SettingHeader
        icon={<RiRobot2Line />}
        className="bg-highlight"
        header={title}
        buttonIcon={showDocumentation ? <SiDocsify /> : undefined}
        buttonText={showDocumentation ? "Documentation" : undefined}
        onClick={
          showDocumentation
            ? () => {
                window.open("https://weaviate.github.io/elysia/", "_blank");
              }
            : undefined
        }
      />

      <SettingGroup>
        <SettingItem>
          <SettingTitle
            title="Description"
            description="The description of your agent."
          />
          <SettingTextarea
            value={currentUserConfig?.agent_description || ""}
            onChange={(value) => {
              onUpdateFields("agent_description", value);
            }}
          />
        </SettingItem>

        <SettingItem>
          <SettingTitle
            title="End Goal"
            description="The end goal of your agent."
          />
          <SettingTextarea
            value={currentUserConfig?.end_goal || ""}
            onChange={(value) => {
              onUpdateFields("end_goal", value);
            }}
          />
        </SettingItem>

        <SettingItem>
          <SettingTitle title="Style" description="The style of your agent." />
          <SettingTextarea
            value={currentUserConfig?.style || ""}
            onChange={(value) => {
              onUpdateFields("style", value);
            }}
          />
        </SettingItem>

        {showFeedbackSetting && (
          <SettingItem>
            <SettingTitle
              title="Improve over Time"
              description="Automatically uses the complex model for all tasks, unless there are enough previous positive feedback examples generated by the complex model, in which case the task will use the base model. If using this option, you should give feedback after a successful interaction."
            />
            <SettingCheckbox
              value={currentUserConfig?.settings.USE_FEEDBACK || false}
              onChange={(value) => {
                onUpdateSettings("USE_FEEDBACK", value);
              }}
            />
          </SettingItem>
        )}
      </SettingGroup>
    </SettingCard>
  );
}
